// <auto-generated />
using System;
using CicekSepetiApi.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CicekSepetiApi.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CicekSepetiApi.Models.Cart", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            UserId = 5,
                            ProductCount = 2
                        },
                        new
                        {
                            ProductId = 2,
                            UserId = 5,
                            ProductCount = 1
                        },
                        new
                        {
                            ProductId = 3,
                            UserId = 5,
                            ProductCount = 3
                        },
                        new
                        {
                            ProductId = 1,
                            UserId = 9,
                            ProductCount = 1
                        },
                        new
                        {
                            ProductId = 3,
                            UserId = 9,
                            ProductCount = 1
                        });
                });

            modelBuilder.Entity("CicekSepetiApi.Models.CartProduct", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("DealerId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.ToTable("CartProducts");
                });

            modelBuilder.Entity("CicekSepetiApi.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Çiçek"
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Çikolata"
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Yılbaşı"
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Hediye"
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Doğum Günü"
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Kokina ve Ponsetya"
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "Orkide ve Saksı Çiçekleri"
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "Yenilebilir Çiçek"
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "Hediye Setleri"
                        });
                });

            modelBuilder.Entity("CicekSepetiApi.Models.Dealer", b =>
                {
                    b.Property<string>("DealerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DealerId")
                        .HasColumnType("int");

                    b.Property<string>("DealerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("vm_Dealers", (string)null);
                });

            modelBuilder.Entity("CicekSepetiApi.Models.DealerProduct", b =>
                {
                    b.Property<string>("DealerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.ToTable("DealerProducts");
                });

            modelBuilder.Entity("CicekSepetiApi.Models.LogProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HostName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LogProducts");
                });

            modelBuilder.Entity("CicekSepetiApi.Models.LogUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HostName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgramName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LogUsers");
                });

            modelBuilder.Entity("CicekSepetiApi.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Products", t =>
                        {
                            t.HasTrigger("tg_ProductsLogUpdate");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "kırmızıGülÇiçekBuketi.jpg,kırmızıGülÇiçekBuketiDetail1.jpg",
                            IsActive = true,
                            Price = 329f,
                            ProductName = "Kırmızı Gül Çiçek Buketi",
                            Stock = 1850,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Image = "beyazPapatyaÇiçekBuketi.jpg,beyazPapatyaÇiçekBuketiDetails1.jpg",
                            IsActive = true,
                            Price = 299f,
                            ProductName = "Beyaz Papatya Çiçek Buketi",
                            Stock = 1250,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Image = "2dalBeyazOrkide.jpg,2dalBeyazOrkideDetails1.jpg",
                            IsActive = true,
                            Price = 849f,
                            ProductName = "2 Dal Beyaz Orkide Çiçeği",
                            Stock = 960,
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            Image = "saksıdaBeyazSpa.jpg,saksıdaBeyazSpaDetails1.jpg",
                            IsActive = true,
                            Price = 469f,
                            ProductName = "Saksıda Beyaz Spatifilyum",
                            Stock = 735,
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            Image = "ayıcıkVeÇikolataKutusu.jpg,ayıcıkVeÇikolataKutusuDetails1.jpg",
                            IsActive = true,
                            Price = 479f,
                            ProductName = "Mutlu Ayıcık ve Çiçekli Çikolata Kutusu",
                            Stock = 150,
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            Image = "akvaryumVeKırmızı7Gül.jpg,akvaryumVeKırmızı7GülDetails1.jpg",
                            IsActive = true,
                            Price = 569f,
                            ProductName = "Paşabahçe Akvaryum Vazoda 7 Kırmızı Gül",
                            Stock = 368,
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            Image = "kraftBukKağıtKokinaYılbaşıÇiçeği.jpg,kraftBukKağıtKokinaYılbaşıÇiçeğiDetails1.jpg",
                            IsActive = true,
                            Price = 749f,
                            ProductName = "Kraft Buket Kağıdında Kokina Yılbaşı Çiçeği",
                            Stock = 980,
                            UserId = 2
                        },
                        new
                        {
                            Id = 8,
                            Image = "siyahBuketKokinaVeTurÇarGüller.jpg,siyahBuketKokinaVeTurÇarGüllerDetails1.jpg",
                            IsActive = true,
                            Price = 649f,
                            ProductName = "Siyah Bukette Kokina ve Turuncu Çardak Güller",
                            Stock = 915,
                            UserId = 2
                        },
                        new
                        {
                            Id = 9,
                            Image = "mutluYılMesajKekLezzetKutu.jpg,mutluYılMesajKekLezzetKutuDetails1.jpg",
                            IsActive = true,
                            Price = 599f,
                            ProductName = "Mutlu Yıllar Mesajlı Keklerle Lezzet Kutusu",
                            Stock = 785,
                            UserId = 2
                        },
                        new
                        {
                            Id = 10,
                            Image = "yenilebilirGülBuk.jpg,yenilebilirGülBukDetails1.jpg",
                            IsActive = true,
                            Price = 349f,
                            ProductName = "Yenilebilir Gül Buketi",
                            Stock = 635,
                            UserId = 2
                        },
                        new
                        {
                            Id = 11,
                            Image = "akvar7KırmıGülKalpGurmeLezzet.jpg,akvar7KırmıGülKalpGurmeLezzetDetails1.jpg",
                            IsActive = true,
                            Price = 669f,
                            ProductName = "Akvaryumda 7 Kırmızı Gül ve Kalpli Gurme Lezzetler",
                            Stock = 438,
                            UserId = 2
                        },
                        new
                        {
                            Id = 12,
                            Image = "hediyeSeti1.jpg,hediyeSeti1Details1.jpg",
                            IsActive = true,
                            Price = 399f,
                            ProductName = "Kişiye Özel Fincan, Türk Kahvesi, Dekoratif Cam Mum, Tütsü Seti",
                            Stock = 872,
                            UserId = 3
                        },
                        new
                        {
                            Id = 13,
                            Image = "hediyeSeti2.jpg,hediyeSeti1Details2.jpg",
                            IsActive = true,
                            Price = 418f,
                            ProductName = "Kişiye Özel Siyah Defter & Siyah Mat Roller Kalem & Siyah Yılbaşı Baskılı Kupa Yeni Yıl Hediye Seti",
                            Stock = 398,
                            UserId = 3
                        },
                        new
                        {
                            Id = 14,
                            Image = "desenliBetonPonsetya.jpg,desenliBetonPonsetyaDetails1.jpg",
                            IsActive = true,
                            Price = 649f,
                            ProductName = "Desenli Beton Saksıda Ponsetya ve Kokina Çiçekleri",
                            Stock = 540,
                            UserId = 2
                        },
                        new
                        {
                            Id = 15,
                            Image = "gülŞekilKırmıVanilAromaKek.jpg,gülŞekilKırmıVanilAromaKekDetails1.jpg",
                            IsActive = true,
                            Price = 399f,
                            ProductName = "Gül Şekilli Kırmızı ve Vanilya Aromalı Kekler",
                            Stock = 1055,
                            UserId = 2
                        },
                        new
                        {
                            Id = 16,
                            Image = "vegaHediyelikEssek.jpg,vegaHediyelikEssekDetails1.jpg",
                            IsActive = true,
                            Price = 219f,
                            ProductName = "Eşeklik Ettim Özür Dilerim Baskılı Tişörtlü Peluş Eşek 22cm - Özür Hediyesi Oyuncak Peluş",
                            Stock = 680,
                            UserId = 3
                        },
                        new
                        {
                            Id = 17,
                            Image = "vegaHediyelikHediyeSeti1.jpg,vegaHediyelikHediyeSeti1Details1.jpg",
                            IsActive = true,
                            Price = 619f,
                            ProductName = "Kişiye Özel Dokunmatik Siyah USB Çakmak & Roller Kalem & Gold Kareli Defter & Siyah Kupa Premium Hediye Seti",
                            Stock = 805,
                            UserId = 3
                        },
                        new
                        {
                            Id = 18,
                            Image = "sevgiLambasıÜrün1.jpg,sevgiLambasıÜrün1Details1.jpg",
                            IsActive = true,
                            Price = 649f,
                            ProductName = "Pilot Hediyesi İsimli, Hostes Hediyesi, 3 Boyutlu Yolcu Uçağı, Hava Yolları Çalışanlarına 3D Uçak",
                            Stock = 405,
                            UserId = 8
                        },
                        new
                        {
                            Id = 19,
                            Image = "sevgiLambasıÜrün2.jpg,sevgiLambasıÜrün2Details2.jpg",
                            IsActive = true,
                            Price = 649f,
                            ProductName = "Yeni Yıl Hediyesi, Yılbaşı Hediyesi, İsimli Mutlu Yıllar Hediyesi, Uçan Geyikler Led Lamba",
                            Stock = 610,
                            UserId = 8
                        });
                });

            modelBuilder.Entity("CicekSepetiApi.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategory");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 7
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 7
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 8
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 8
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 8
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 7
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 8
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 9
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 9
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 7
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 8
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 9
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 9
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 9
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 9
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 3
                        });
                });

            modelBuilder.Entity("CicekSepetiApi.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "user"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "dealer"
                        });
                });

            modelBuilder.Entity("CicekSepetiApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", t =>
                        {
                            t.HasTrigger("tg_UsersLogUpdate");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2025, 1, 1, 16, 19, 23, 985, DateTimeKind.Local).AddTicks(3010),
                            Email = "ensar@gmail.com",
                            FirstName = "Ensar",
                            LastName = "Atıcı",
                            Password = "ensar123"
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2025, 1, 1, 16, 19, 23, 985, DateTimeKind.Local).AddTicks(3044),
                            Email = "cicekSepeti@gmail.com",
                            FirstName = "Çiçek",
                            LastName = "Sepeti",
                            Password = "çiçeksepeti123"
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2025, 1, 1, 16, 19, 23, 985, DateTimeKind.Local).AddTicks(3056),
                            Email = "vega@hotmail.com",
                            FirstName = "Vega",
                            LastName = "Hediyelik",
                            Password = "vegahediyelik123"
                        },
                        new
                        {
                            Id = 8,
                            CreatedTime = new DateTime(2025, 1, 1, 16, 19, 23, 985, DateTimeKind.Local).AddTicks(3068),
                            Email = "sevgiLambasi@gmail.com",
                            FirstName = "Sevgi",
                            LastName = "Lambası",
                            Password = "sevgiLambası123"
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2025, 1, 1, 16, 19, 23, 985, DateTimeKind.Local).AddTicks(3079),
                            Email = "mehmet@gmail.com",
                            FirstName = "Mehmet",
                            LastName = "Fatih",
                            Password = "mehmet123"
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2025, 1, 1, 16, 19, 23, 985, DateTimeKind.Local).AddTicks(3092),
                            Email = "math@hotmail.com",
                            FirstName = "Math",
                            LastName = "Bonus",
                            Password = "math123"
                        },
                        new
                        {
                            Id = 6,
                            CreatedTime = new DateTime(2025, 1, 1, 16, 19, 23, 985, DateTimeKind.Local).AddTicks(3102),
                            Email = "ahmet@gmail.com",
                            FirstName = "Ahmet",
                            LastName = "Yıldız",
                            Password = "ahmet123"
                        },
                        new
                        {
                            Id = 7,
                            CreatedTime = new DateTime(2025, 1, 1, 16, 19, 23, 985, DateTimeKind.Local).AddTicks(3113),
                            Email = "john@hotmail.com",
                            FirstName = "John",
                            LastName = "Wick",
                            Password = "john123"
                        },
                        new
                        {
                            Id = 9,
                            CreatedTime = new DateTime(2025, 1, 1, 16, 19, 23, 985, DateTimeKind.Local).AddTicks(3123),
                            Email = "zehra@hotmail.com",
                            FirstName = "Zehra",
                            LastName = "Polat",
                            Password = "zehra123"
                        },
                        new
                        {
                            Id = 10,
                            CreatedTime = new DateTime(2025, 1, 1, 16, 19, 23, 985, DateTimeKind.Local).AddTicks(3134),
                            Email = "efdal@hotmail.com",
                            FirstName = "Efdal",
                            LastName = "Atıcı",
                            Password = "efdal123"
                        });
                });

            modelBuilder.Entity("CicekSepetiApi.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("CicekSepetiApi.Models.Cart", b =>
                {
                    b.HasOne("CicekSepetiApi.Models.Product", "Product")
                        .WithMany("CartUsers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CicekSepetiApi.Models.User", "User")
                        .WithMany("CartProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CicekSepetiApi.Models.Product", b =>
                {
                    b.HasOne("CicekSepetiApi.Models.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CicekSepetiApi.Models.ProductCategory", b =>
                {
                    b.HasOne("CicekSepetiApi.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CicekSepetiApi.Models.Product", "Product")
                        .WithMany("Categories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CicekSepetiApi.Models.UserRole", b =>
                {
                    b.HasOne("CicekSepetiApi.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CicekSepetiApi.Models.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CicekSepetiApi.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CicekSepetiApi.Models.Product", b =>
                {
                    b.Navigation("CartUsers");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("CicekSepetiApi.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CicekSepetiApi.Models.User", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("Products");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
